apiVersion: apps/v1
kind: Deployment
metadata:
  name: failuremanager
spec:
  selector:
    matchLabels:
      app: failuremanager
  template:
    metadata:
      labels:
        app: failuremanager
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5002"     # Our application port. Prometheus will listen to it.    
    spec:
      priorityClassName: high-priority
      volumes:
        - name: shared-files
          emptyDir: {}
        - name: nginx-config-volume
          configMap:
            name: nginx-config 
      hostNetwork: true
      dnsPolicy: ClusterFirst               
      containers:        
        - image: californibrs/failuremanager
          name: failuremanager
          resources:
            requests:
              memory: "32Mi"
              cpu: "100m"
            limits:
              memory: "128Mi"
              cpu: "500m"
      imagePullSecrets:
      - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: failuremanager
spec:
  type: LoadBalancer
  selector:
    app: failuremanager
  ports:
  - port: 5002 # port from application

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: failuremonitor
spec:
  selector:
    matchLabels:
      app: failuremonitor
  template:
    metadata:
      labels:
        app: failuremonitor
    spec:
      priorityClassName: high-priority
      serviceAccountName: kubow-user
      containers:
      - name: failuremonitor
        image: californibrs/failuremonitor
        env:
        - name: PYTHONUNBUFFERED
          value: "1"
        resources:
          requests:
            memory: "32Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "500m"
      imagePullSecrets:
      - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: failuremonitor
spec:
  type: LoadBalancer
  selector:
    app: failuremonitor
  ports:
  - port: 5001 # port from application


---  

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: kubow-user  # This user must be in the deployments that use K8s API
rules:
- apiGroups: ["apps", ""]
  resources:
  - deployments
  - pods
  - events
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubow-user
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: kubow-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubow-user
subjects:
- kind: ServiceAccount
  name: kubow-user
  namespace: default  

---

apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: failuremanager-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: "nginx-ingress.failure.svc"
    http:
      paths:

      #Endpoints
      - path: /hello
        backend:
          serviceName: failuremanager
          servicePort: 5002
      - path: /insufficientcpu
        backend:
          serviceName: failuremanager
          servicePort: 5002          

